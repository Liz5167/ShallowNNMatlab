//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// simulateStandaloneNet.cpp
//
// Code generation for function 'simulateStandaloneNet'
//

// Include files
#include "simulateStandaloneNet.h"
#include <cmath>

// Function Definitions
double simulateStandaloneNet(const double x1[13])
{
  static const double d_a[130]{
      -0.01305168521887401, 0.87243253346550675,  -5.7212715129083538,
      2.6504884902970769,   -1.972528169254167,   0.059228825326238022,
      -1.718489728893237,   0.046991645489023764, 0.19060474003448521,
      0.970962933318829,    -0.408644349930981,   -4.2206981560112355,
      -0.52020098388551239, -1.0741674398281189,  1.518665919634929,
      -0.742000965643604,   -0.90654155647292611, 3.5925164418083648,
      1.7513918393267565,   1.5524899168485333,   -3.4093327829951026,
      -7.5786952437670259,  3.0395733941402332,   3.4652021882291382,
      -4.1391949101315531,  -1.3078955226469995,  1.737378182838953,
      -6.4800651789382453,  0.662750220810405,    -0.024232114969588991,
      2.7672439676857818,   -1.1672027634341995,  0.25306370367218767,
      2.2511893229966908,   0.68616648404974157,  -0.75966262407772378,
      3.6373866005314173,   -2.0420590240597805,  1.4430458452234378,
      0.88923409434183687,  -0.09302716540318845, -1.6476103313496564,
      -1.5381181646984636,  -1.8985953961556454,  -5.9851968201203292,
      0.72608870328008845,  -2.137892792671622,   -1.9753967836499891,
      -2.5263440203734917,  5.1223167615001151,   3.497864281061839,
      2.8658925769490904,   -0.12680743754856871, -2.6851969612123092,
      -2.2433322002095446,  1.2784178432035258,   -1.3251670564995122,
      -0.93434223783677073, -1.173847995758408,   -1.6893845743768763,
      0.32983632613027619,  -0.697305125985117,   -0.19003639232502723,
      1.8881869602265358,   -1.2302982580733519,  -0.27709188933545775,
      1.9696851773706223,   -2.0023418005042379,  -0.44710643243063847,
      1.6347840534044786,   -0.39671039867716712, 2.9872147015962871,
      2.2904747675598744,   1.1376311751223913,   2.0386085723427723,
      -0.16291461997812173, 4.45270736396424,     2.12143706798182,
      0.22552136226533404,  -3.8156233193448008,  -4.162922387929342,
      0.58713929763311989,  2.4031499059107797,   -1.3706323535795208,
      0.15633394858511923,  0.99369761962424974,  2.8406727290684048,
      3.0113476023029393,   -3.7668192624024983,  0.97035323113139527,
      -3.5739684865345565,  3.7184709545452859,   0.33343420459677775,
      3.7309552143601064,   3.4620870291285639,   -1.144861664286591,
      0.32576017342050456,  -2.7444487486932334,  -2.93190474988669,
      -4.0445245604974449,  -3.4650779691708169,  1.7095110394434718,
      1.7975873417150912,   6.403084506907315,    -0.71324169998276088,
      0.73218054298545465,  -0.76522826911083863, 2.0127420239207074,
      -0.32803914944480772, 0.70688687407075412,  0.57215487512236,
      1.5222350132251303,   0.43439227984349582,  2.3643759447466519,
      -3.8064866887912494,  -0.52616292998919523, -1.4066696346340428,
      -1.0251841119142178,  -1.7159308859736979,  -0.41308352379542679,
      0.051545946265023762, 1.716761033867382,    0.20715853600854461,
      -0.80619261629005923, 0.14512960323533408,  -0.21387000146501631,
      -0.95431038538077728, -1.5184378009386479,  -3.456615346159265,
      0.5566007321970794};
  static const double dv[13]{22.0, 118.5, 29.5, 31.1, 79.3, 69.4, 85.0,
                             47.2, 33.0,  19.1, 24.8, 21.0, 15.8};
  static const double dv1[13]{
      0.0338983050847458, 0.00817494379726139, 0.0414507772020725,
      0.099502487562189,  0.0351493848857645,  0.0254129606099111,
      0.0318979266347687, 0.0498753117206983,  0.124223602484472,
      0.135135135135135,  0.099009900990099,   0.143884892086331,
      0.357142857142857};
  static const double b_a[10]{0.86045384148903348,    0.25917492258355435,
                              -0.0013754262176830789, -0.0023612868230740436,
                              -0.25454110977296429,   0.85041389188467831,
                              0.28849076983367422,    -0.28754348719804862,
                              -0.010545674450276165,  -0.45092729020201888};
  static const double c_a[10]{-4.1688788176463483,  3.9421924345907584,
                              -0.57836024734215319, -2.7267031918436366,
                              0.34123076437510325,  0.86642967378796965,
                              3.9612324488862947,   3.6322017739881081,
                              1.0269173131279297,   1.8766051639190127};
  double xp1[13];
  double a;
  // SIMULATESTANDALONENET neural network simulation function.
  //
  //  Auto-generated by MATLAB, 26-Feb-2024 14:36:31.
  //
  //  [y1] = simulateStandaloneNet(x1) takes these arguments:
  //    x = 13xQ matrix, input #1
  //  and returns:
  //    y = 1xQ matrix, output #1
  //  where Q is the number of samples.
  //  ===== NEURAL NETWORK CONSTANTS =====
  //  Input 1
  //  Layer 1
  //  Layer 2
  //  Output 1
  //  ===== SIMULATION ========
  //  Dimensions
  //  samples
  //  Input 1
  //  ===== MODULE FUNCTIONS ========
  //  Map Minimum and Maximum Input Processing Function
  for (int k{0}; k < 13; k++) {
    xp1[k] = (x1[k] - dv[k]) * dv1[k] - 1.0;
  }
  //  Layer 1
  //  Sigmoid Symmetric Transfer Function
  //  Layer 2
  //  Output 1
  //  Map Minimum and Maximum Output Reverse-Processing Function
  a = 0.0;
  for (int k{0}; k < 10; k++) {
    double d;
    d = 0.0;
    for (int i{0}; i < 13; i++) {
      d += d_a[k + 10 * i] * xp1[i];
    }
    a += b_a[k] * (2.0 / (std::exp(-2.0 * (c_a[k] + d)) + 1.0) - 1.0);
  }
  return ((a + 0.61056573243914092) - -1.0) / 0.0421052631578947;
}

// End of code generation (simulateStandaloneNet.cpp)
